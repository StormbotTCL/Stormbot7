sb7 command add tvmaze 0 -none tvmaze TV
sb7 register global TVM:SHOW
sb7 register global TVM:ACTOR
sb7 register user TVM:*

namespace eval tvmaze {
	# Define search URLs
	variable search_shows "http://api.tvmaze.com/search/shows"; # ?q=girls
	variable single_show "http://api.tvmaze.com/singlesearch/shows"; # ?q=girls for episode embedding: &embed=episodes
	variable show_lookup "http://api.tvmaze.com/lookup/shows"; # ?tvrage=24493 or ?thetvdb=81189
	variable ppl_search "http://api.tvmaze.com/search/people"; # ?q=lauren
	variable eps_sched "http://api.tvmaze.com/schedule"; # ?country=countrycode (optional) ?date=2014-12-01 (optional)
	variable shows "http://api.tvmaze.com/shows/" 
	#variable 
}

proc @tvmaze { nick host handle chan arg } {
	sb7 parseflags
	set header {[TVMAZE]}

	switch -exact -- $1l {
		help {
			print -help $nick "\[TVMAZE\]"
			print -help $nick "Syntax: $::botnick TVMAZE HELP"
			print -help $nick "Syntax: $::botnick TVMAZE SUMMARY <ID> (WIP)"
			print -help $nick "Syntax: $::botnick TVMAZE SEARCH <SHOW | <ACTOR> <search params> (WIP)"
			print -help $nick "Syntax: $::botnick TVMAZE PERSON <ID> (WIP)"
			print -help $nick "Syntax: $::botnick TVMAZE EPISODES <ID> \[PREV | NEXT | specific episode number | ALL \] (default = \"NEXT\") (WIP)"
			print -help $nick "Syntax: $::botnick TVMAZE CAST (WIP)"
			print -help $nick "Syntax: $::botnick TVMAZE INDEX[color] (WIP)"
			print -help $nick "Syntax: $::botnick TVMAZE ID LIST \[wildcard: OK\] (WIP)"
			print -help $nick "Syntax: $::botnick TVMAZE SET COUNTRIES <list of countries, 2-character codes> (WIP)"
			print -help $nick "Syntax: $::botnick TVMAZE ALIAS SET <ACTOR | SHOW> <ID> <NAME>"
			print -help $nick "Syntax: $::botnick TVMAZE ALIAS DEL <ACTOR | SHOW> <ID> (WIP)"
			print -help $nick "Syntax: $::botnick TVMAZE ALIAS LIST <ACTOR | SHOW> \[wildcard: OK\] (WIP)"
			print -help $nick "Syntax: $::botnick TVMAZE ALIAS CLEAR <ACTOR | SHOW> (WIP)"
			print -help $nick "Syntax: $::botnick TVMAZE SCHEDULE <date: YYYY-MM-DD or MM/DD/YYYY or \"TODAY\" or \"TOMORROW\"> \[list of countries, 2-character codes (US, GB, et cetera), space-delimited\] (WIP)"
			print -help $nick ""
			print -help $nick "The TVMAZE command searches the online database at TV Maze (.com) for TV show information. The website is restricted to television shows and does not handle movies (like IMDB.com does)."
			print -help $nick "For some commands, you need the show's (or person's) TV Maze ID number. Do a search for the person to get the ID number. Future updates to this command will allow you to store the ID numbers for later (easier) use."
			print -help $nick "Episode numbers can be expressed in all normal internet formats: S01E02, 01x02, 0102, S1E02, 1x02, or 102 (all = season 1, episode 2); this command will list all episodes in 00x00 format."
			print -help $nick "For any ID # requests, the command will automatically look up any name given (from both the global pool or from you alias list) for the appropriate ID number as needed."
			print -help $nick "For this bead to work, $::botnick must have access to the internet-at-large (WAN TCP ability) and the HTTP package. $::botnick will also need the JSON package (the website only provides JSON data for processing)."
			set fails [tvmaze:check_packages]
			print -help $nick "Missing packages: [none $fails [color 3]<none>[color] "[color 4][ajl $fails][color]"]"
			return 0
		}

		alias {
			if [isempty 2] { print -help $nick "$header Missing: command (set / del / list / clear)" ; return 0 }
			if [isempty 3] { print -help $nick "$header Missing: type (show / actors)" ; return 0 }
			set um [uniquematch [list show actor] $3]
			set data [userinfo get $handle um]
			array set array $data

			switch -exact -- [uniquematch [list set del list clear] $2] {
				set {
					if [isempty 4] { print -help $nick "$header Missing: ID" ; return 0 }
					if [isempty 5] { print -help $nick "$header Missing: name" ; return 0 }
					set array($4) $5
					userinfo set $handle TVM:$um [array get array]
					saveme user
					print $nick "$header Added new alias: \"${5}\" (ID #${4})"
					return 0
				}
				
			}
		}
	}
}

proc tvmaze:check_packages args {
	set header {[TVMAZE]}

	# Make sure the required packages are installed
	if [isempty args] { set args [list http json] }
	empty fails

	foreach package $args {
		set error [ catch { package require $package } crap ]
		if $error { lappend fails $package }
	}

	if [notempty fails] {
		set message "$header Unable to load the following pakcages: [ajl $fails] (can't function)"
		putlog $message
		catch { if [onchan $::botnick [home]] { msghome $message } }
	}

	return $fails
}

proc @tvmaze:bootstrap args {
	tvmaze:check_packages
}

#####
# BootStrap:
@tvmaze:bootstrap