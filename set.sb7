sb7 command add SET 1 -none
sb7 command add INFO 1 -none
sb7 command add MY 1 -none

# NOTE: "getuser <handle> XTRA" gives a full list of set items (COPYUSER? :)

# This is needed for WHOIS and COPYUSER
data set @SET:VALID [list output gmt timezone burst prefix postfix alias color datetime private rank]

proc @my { nick host handle chan arg } {
	sb7 parseflags
	if [notempty 2] { sb7:dispatch $nick $host $handle $chan "SET $1 $2e" ; return }
	sb7:dispatch $nick $host $handle $chan "INFO ME $1" 
	return
}

proc @set { nick host handle chan arg } {
	sb7 parseflags
	set valid [data get -lower @SET:VALID]
	switch -exact -- $1l {

		help {
			print -help $nick "\[SET\]:"
			print -help $nick "Syntax: $::botnick SET HELP"
			print -help $nick "Syntax: $::botnick SET <type> <data>"
			print -help $nick "The SET command allows you to set personal information in your userfile entry. The information can be viewed by the INFO command."
			print -help $nick "Available options: [ajl [data get @SET:VALID]]"
			return 
		}

		list { print -return $nick "\[SET\] Available options: [ajl $valid]" }

		default {
			set param [uniquematch $valid $1]
			if [isempty 2] { print -short -return $nick "\[SET [string toupper $1]\] Value: [none [userinfo get $handle $param] <none>]" }
			#if { [string eq -nocase NONE $2] || [string eq -nocase OFF $2] }
			if [string eq -nocase NONE $2] {
				# Can't use ISFALSE because "0" is valid for COLOR and other options
				empty value 
			} {
				set value [join [join $2e]]
			}
			if [isempty param] { print -error -header:short -return $nick "Unknown parameter to set" }

			# Any specific / special considerations?
			switch -exact -- [string tolower $param] {

				color {
					if [left $value 1 \003] { 
						set value [mid $value 2]
						print -help $nick "You don't need the CTRL-K code here\; I just need the digits." 
					}
				}

				rank {
					set value [stt [uniquematch [list navy coastguard army airforce marines] [join $value ""]]]
					if [isempty value] { print -short -return $nick "Options for rank: Navy, Coast Guard, Army, Air Force, & Marines (any unique abbreviation (and spaces) accepted)" }
				}

			}

			userinfo set $handle $param $value
			saveme data
			print -header:short $nick "Updating your \"${param}\" setting to: [none $value <none>]"
			return 0
		}

	}
	?
}

proc @info { nick host handle chan arg } {
	sb7 parseflags
	if [string eq -nocase HELP $1] {
		print -help $nick "\[INFO\]:"
		print -help $nick "Syntax: $::botnick INFO HELP"
		print -help $nick "Syntax: $::botnick INFO LIST"
		print -help $nick "Syntax: $::botnick INFO ME <item | \"ALL\">"
		print -help $nick "Syntax: $::botnick INFO <user> <item | \"ALL\">"
		print -help $nick "The INFO command displays your personal information, or, the information of another user."
		print -help $nick "Use \"ALL\" to see all information available. Otherwise, you will be shown the specific item you requested."
		return
	}

	if [string eq LIST $1u] { print -short -return $nick "List of available settings: [ajl [data get @SET:VALID]]" }

	if { [string eq ME $1u] || [string eq MY $1u] } {
		set th $handle
		set tn $nick
	} {
		lassign [whois $1 $1 $chan] online tn - th
		if ![validuser $th] { print -error -header:short $nick "No such user: $1" }
	}

	set list [data get @SET:VALID]
	if { [string eq -nocase ALL $2] || [string eq -nocase * $2] || [string eq "" $2] } {
		set list [data get @SET:VALID]
	} {
		empty list
		set valid [data get @SET:VALID]
		foreach a $2e {
			set u [uniquematch $valid $a]
			if [isempty u] { print -error -header:short $nick "No such data item: $a" ; return }
			lappend list $u 
		}
	}

	print -header:short $nick "Information for [nph $tn $th]:"
	foreach a [lsort -inc -dict -uni $list] {
		set d [userinfo get $th $a]
		if [notempty d] { print -header:short $nick "[string toupper $a]: [none $d <none>]" }
	}
	return 
}


