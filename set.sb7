sb7 command add SET 1 -none
sb7 command add MY 1 -none

# NOTE: "getuser <handle> XTRA" gives a full list of set items (COPYUSER? :)

# This is needed for WHOIS and COPYUSER
data set @SET:VALID [list output gmt timezone burst prefix postfix alias color datetime private rank nochon]

proc @my { nick host handle chan arg } {
	sb7 parseflags
	if [notempty 2] { sb7:dispatch $nick $host $handle $chan "SET $1 $2e" ; return }
	sb7:dispatch $nick $host $handle $chan "INFO ME $1" 
	return
}

proc @set { nick host handle chan arg } {
	sb7 parseflags
	set valid [data get -lower @SET:VALID]
	switch -exact -- $1l {

		help {
			print -help $nick "\[SET\]:"
			print -help $nick "Syntax: $::botnick SET HELP"
			print -help $nick "Syntax: $::botnick SET <type> <data>"
			print -help $nick "The SET command allows you to set personal information in your userfile entry. The information can be viewed by the INFO command."
			print -help $nick "Available options: [ajl [data get @SET:VALID]]"
			return 
		}

		list { print -return $nick "\[SET\] Available options: [ajl $valid]" }

		default {
			set word [uniquematch $valid $1]
			set param $word

			# Will fail for NOCHON ( --> chon:quiet )
			if [isempty 2] { print -short -return $nick "\[SET [string toupper $1]\] Value: [none [userinfo get $handle $param] <none>]" }

			if [string eq -nocase NONE $2] {
				# Can't use ISFALSE because "0" is valid for COLOR and other options
				empty value 
			} {
				set value [join [join $2e]]
			}
			if [isempty param] { print -error -header:short -return $nick "Unknown parameter to set" }

			# Any specific / special considerations?
			switch -exact -- [string tolower $param] {

				output {
					set valid [list notice msg chan same]
					set um [uniquematch $valid $value]
					if [isempty um] { print -help -return $nick "Invalid OUTPUT option \"${value}\" (valid options: [ajl $valid])" }
				}

				color {
					if [left $value 1 \003] { 
						set value [mid $value 2]
						print -help $nick "You don't need the CTRL-K code here\; I just need the digits." 
					}
				}

				rank {
					set value [stt [uniquematch [list navy coastguard army airforce marines] [join $value ""]]]
					if [isempty value] { print -short -return $nick "Options for rank: Navy, Coast Guard, Army, Air Force, & Marines (any unique abbreviation (and spaces) accepted)" }
				}

				nochon {
					#set param chon:quiet
					set value [boolean -falsetrue $value]
				}

			}

			userinfo set $handle $param $value ; # Use $PARAM here
			saveme data
			print -header:short $nick "Updating your \"${word}\" setting to: [none $value <none>]" ; # Use $WORD here
			return 0
		}

	}
	?
}

