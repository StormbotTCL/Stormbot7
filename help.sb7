sb7 command add HELP -1 -locklevel -core

proc @help { nick host handle chan arg } {
	if [string eq -nocase NULL [userinfo get $handle output]] {
		userinfo set $handle output notice
		print $nick "\[HELP\] Your output is currently set to NULL, so, I can't show you anything!"
		userinfo set $handle output NULL
		return 1
	}

	sb7 parseflags 
	if [isempty 1] {
		print -help $nick "\[HELP\]:"
		print -help $nick "Syntax: $::botnick HELP"
		print -help $nick "Syntax: $::botnick HELP LIST"
		print -help $nick "StormBot.TCL v[data array get @version stormbot] is a far-reaching add-on script for the Eggdrop (C-coded) IRC robot. StormBot.TCL adds additional commands to Eggdrop to perform custom tasks, perform maintenance, perform server or network level tasks, or enhance Eggdrop's guardianship of channels."
		print -help $nick "Commands are triggered by using the bot's nickname and then a command word. Most commands require an additional parameter (or so) to complete the command."
		print -help $nick "One such example is the command you typed to get this information: $::botnick HELP"
		print -help $nick "The commands are accessed by user levels (access levels for each user on two planes: local (\"per-channel\") and global (adminstrative). A channel's owner (or designee) will grant you certain access on various channels the bot monitors as they trust you or want you to perform verious tasks."
		print -help $nick "Global access is usually granted by the bot's owner (or managers) who trust you to perform maintenance tasks with the bot. Global access usually means you also have \"oversight\" access on all the channels. I warn you not to abuse your abilities by affecting channels in which you have no permission to play."
		print -help $nick "Channel access levels are: -1 (unknown user), 0 (known user on some other channel, but, not here), levels 1-499 (various channel members), and 500 (channel owner)"
		print -help $nick "Global access levels are: -1 (completely unknown user), 501-999 (global administrative staff), and 1000-1001 (bot's permanent owner)"
		print -help $nick "In most cases, there is only one permanent owner (set in the \"set owner\" variable in my configuration file); that user will have access level 1000. In case more than one owner set, the first-in-order will have level 1001 access; the rest will have access level 1000. Other than a boss-hierarchy, there is no difference between levels 1000 and 1001."
		print -help $nick "To see the HELP information for a specific command, do: $::botnick <command> HELP (each command has its own HELP information)"
		print -help $nick "To see all the commands available to a given access level, do: $::botnick HELP <level range> (\"level range\" refers to a specific level like \"=100\" or a range like \"200-500\")"
		print -help $nick "Some commands have an additional option: \"HINT\" (for example: some commands have changed syntax since SB3 / SB4 / SB5 / SB6\; \"HINT\" will show you how it is different in SB7.)"
		print -help $nick "Example: /msg $::botnick LOGIN HINT"
		print -help $nick "The first commands you will ever need to know (when building me up) are: PASS, LOGIN, HELP, and ADDUSER. For my permanent owner, also look up: OPASS"
		return
	}

	# Work for all commands, not just LOGIN-related
	if { ( [string eq -nocase LOGIN $1] || [string eq -nocase AUTH $1] ) || [sb7 command check $1] } {
		# print info re: new LOGIN format
		[sb7 command get $1 proc] $nick $host $handle $arg "$1 help [lreplace $arg 0 1]"
		return
	}

	# Only needed for HELP LIST? If so, move this within that IF/THEN
	emptyarray levels
	foreach a [data array names @COMMANDLIST] { lappend levels([sb7 command get $a level]) $a }

	if [string eq -nocase LIST $1] {
		set level [access compare $handle]
		if ![is authed $handle $nick $host] { set level -1 }
#debug level
		print -help $nick "\[HELP LIST\] Commands that are available to you:"
		foreach a [lsort -dec -int [array names levels]] {
			if { $a <= $level } { print -help $nick "Level [comma $a]: [ajl $levels($a)]" }
		}
		print -help $nick "End of list."
	}

	# Parse for individual levels / ranges; loop through and PRINT AJL $LEVELS(LOOP).

	# Otherwise ....
	print -help -short $nick "Unknown option: [join $1]"
	return
}


