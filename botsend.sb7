sb7 command add BOTSEND 700 -none BS
sb7 register global BOTSEND

# 2014-11-11 21:30:00 -0800: DO NOT MESS WITH BOTSEND QUICK: IT IS THE ONLY WAY TO GUARANTEE THAT SENDS CAN BE DONE WHEN THERE ARE PROTOCOL CHANGES OTHERWISE!!

proc @botsend { nick host handle chan arg } {
	sb7 parseflags
	switch -exact -- [string tolower $1] {

		help {
			print -help $nick "\[BOTSEND\]:"
			print -help $nick "Syntax: $::botnick BOTSEND HELP"
			print -help $nick "Syntax: $::botnick BOTSEND HINT"
			print -help $nick "Syntax: $::botnick BOTSEND SEND \[-NOENCRYPT\] <bot list> \": (or \"|\")\" <file list>"
			print -help $nick "Syntax: $::botnick BOTSEND QUICK <bots> : <files>"
			print -help $nick "Syntax: $::botnick BOTSEND STATUS"
			print -help $nick "Syntax: $::botnick BOTSEND SHIFT \[wildcard\]"
			print -help $nick "Syntax: $::botnick BOTSEND SET <option> \[value\]"
			print -help $nick ""
			print -help $nick "The BOTSEND command is a rudimentary re-write of the SB5/SB6 command which sends files from one bot to another (via the botnet). Obviously, both sending and target bots must be connected into the same botnet (anywhere / any configuration will do)."
			print -help $nick "For now, BOTSEND can NOT handle file names with spaces in them. All file names must be without any spaces (underscore, dash, and other printable characters are legal)."
			print -help $nick "All files will default to the \"botsend\" sub-directory ( [none [data array get botsend option:dir] [sb7 target dir .]/botsend/] ), unless AUTOSHIFT is on (see \"SET\" below)."
			print -help $nick ""
			print -help $nick "SHIFT: move the files from the \"incoming directory\" ( [none [data array get botsend option:dir] [sb7 target dir .]/botsend/] ) to a more-logical directory. Example: SB7 component files (say.sb7) would be moved to: [sb7 target dir .]/scripts/sb7/"
			print -help $nick "SET / GET / LIST: adjust options for BOTSEND"
		}

		hint {
			print -help $nick "New syntax for SB7 (note the literal colon \[\":\"\]):"
			print -help $nick "$::botnick BOTSEND SEND \[-NOENCRYPTION\] <target 1> \[target 2\] \[target 3\] ... \[target N\] : <file 1> \[file 2\] \[file 3\] ... \[file n\]"
			return
		}

		st - stat - stats - status {
			set entries [data array find @botsend]
			if [isempty entries] { print -return $nick "\[BOTSEND STATUS\] No files currently being transferred." }

			empty tx rx
			zero count_tx count_rx
			foreach id $entries {
				set direction [data array lindex @botsend $id]
debug id direction
				if [string eq -nocase TX $direction] {
					lassign [data array get @botsend $id] - _nick _host _handle _chan _bot _ts _milli _tail _data _size
					incr count_tx
					lappend tx "Sending ${count_tx}) [% [expr $_size - [len $_data]] $_size 1]: [nph $_nick $_handle]-->$_tail ([comma $_size]) - Started: [format:date $_ts $handle]"
				} {
					incr count_rx
					lassign [data array get @botsend $id] - _nick _host _handle _chan _tail _ts _milli _bot _data _size
					lappend rx "Receiving ${count_tx}) [% [expr $_size - [len $_data]] $_size 1]: [nph $_nick $_handle]-->$_tail ([comma $_size]) - Started: [format:date $_ts $handle]"
				}
			}
			foreach a $tx { print $nick $tx }
			foreach a $rx { print $nick $rx }
			print $nick "\[BOTSEND STATUS\] End of report."
			return
		}

		kill - killall {
			data array clear @botsend
			putallbots [list botsend:receive kill $nick $handle]
			print -short $nick "All transfers killed."
			return
		}

		shift {
			if ![access check 1000 $handle] { print -error -header -return $nick "You don't have access to use this option." }
#debug =0
			if [string eq -nocase LIST $2] {
#debug =1
				set files [glob -nocomplain -tails -directory [sb7 target dir ""]/botsend -- *]
#debug =1.5
				if [isempty files] { print -header -return $nick "No files need to be shifted." }
#debug =1.6
				foreach file [lsort -inc -dict $files] { print $nick "${file} -> [sb7 target dir $file]" }
#debug =1.7
				print $nick "Done."
#debug =1.8
				return 
			}
#debug =2
			if [isempty 2] { set pattern * } { if [string eq ALL $2u] { set pattern * } { set pattern $2 } }
			set path [file dirname [file normalize $::config]]/botsend
			set files [glob -nocomplain -directory $path -tails -- $pattern]
			if [isempty files] { print -short -help -return $nick "No files to shift." }
			empty ok bad
			array set dirs [list]
			foreach file $files {
				set dir [sb7 target dir $file]
				set error [ catch { file rename -force ${path}/$file ${dir}/ } crap ]
				if $error { lappend bad "$file (-> ${dir}): $crap" } { lappend ok $file ; lappend dirs($dir) $file }
			}
			if [notempty ok] {
				foreach a [lsort -increasing -dictionary [array names dirs]] {
					print -header $nick "Shifted OK ($a) [join $dirs($a) " - "]"
				}
			}
			if [notempty bad] { foreach a $bad { print -header $nick "Shift Error: $a" } }
			return
		}

		alias {
			switch -exact -- [string tolower $2] {

				add {
					if [isempty 3] { print -short -return $nick "What alias am I editing?" }
					if [isempty 4] { print -short -return $nick "What am I adding to that alias?" }
					set alias [data array get BOTSEND ALIAS:$3]
					empty ok bad
					foreach bot $4e { 
						set m [lsearch -exact [string tolower $alias] [string tolower $bot]]
						if { $m == -1 } { lappend ok $bot ; lappend alias $bot } { lappend bad $bot }
					}
					data array set BOTSEND ALIAS:$3 $alias
					if [notempty ok] { saveme data ; print -short $nick "Added: [ajl $ok]" }
					if [notempty bad] { print -short $nick "Already added: [ajl $bad]" }
					print $nick "Current alias: [none [ajl $alias] <none>]"
					return
				}

				del {
					if [isempty 3] { print -short -return $nick "What alias am I editing?" }
					if [isempty 4] { print -short -return $nick "What alias am I removing from that alias?" }
					if [string eq * $4] {
						data array set BOTSEND ALIAS:$3 ""
						saveme data
						print -return -short $nick "The \"${3}\" alias has been cleared."
					} {
						set alias [data array get BOTSEND ALIAS:$3]
						empty ok bad
						foreach bot $4e { 
							set m [lsearch -exact [string tolower $alias] [string tolower $bot]]
							if { $m == -1 } { lappend bad $bot } { lappend ok $bot ; set alias [lreplace $alias $m $m] }
						}
						data array set BOTSEND ALIAS:$3 $alias
						if [notempty ok] { saveme data ; print -short $nick "Added: [ajl $ok]" }
						if [notempty bad] { print -short $nick "Never existed: [ajl $bad]" }
					}
					print $nick "Current alias: [none [ajl $alias] <none>]"
					return
				}

				list {
					if [isempty 3] {
						# List all
						foreach group [lsort -unique -dictionary -increasing [data array names BOTSEND ALIAS:*]] {
							print -return -short $nick "\"[string toupper [mid $group 7]]\" group: [none [ajl [data array get BOTSEND $group]] <none>]"
						}
					} {
						# List specific
						print -return -short $nick "\"${3}\" group: [none [ajl [data array get BOTSEND ALIAS:$3]] <none>]"
					}
					return
				}

				clear {
					if ![string eq -nocase CLEAR $3] { print -help -short -return $nick "Are you \002\037SURE\002\037?! Use \"CLEAR CLEAR\" to convince me." }
					foreach a [data array names BOTSEND ALIAS:*] { data array set BOTSEND $a "" }
					saveme data
					print -return -header $nick "All aliases have been cleared."
				}

				default { error "\[BOTSEND ALIAS\] Unknown option: $2" }

			}
		}

		quick {
			if [instr $2e :] {
				lassign [split $2e :|] temp_bots1 temp_files
			} {
				set temp_bots1 $2
				set temp_files $3e
			}

			empty temp_bots2
			foreach bot $temp_bots1 {
				if [data array get -notempty botsend alias:$bot] {
					set temp_bots2 [concat $temp_bots2 [data array get botsend alias:$bot]]
				} {
					lappend temp_bots2 $bot
				}
			}

			empty bots
			foreach bot $temp_bots2 {
				set bot [casebot [join $bot]]
				if [islinked $bot] { lappend bots $bot } { print -help $nick "\[BOTSEND QUICK\] No such bot linked: $bot" }
			}
			if [isempty bots] return

			empty files
			foreach file $temp_files {
				set file [join $file]
				if [file exists [sb7 component $file]] { lappend files $file } { print -help $nick "\[BOTSEND QUICK\] No such file: $file" }
			}
			if [isempty files] return

			pingpong
			set bots [lunique $bots]
			set files [lunique $files]

			foreach file $files {
				set file [sb7 component $file]
				set tail [file tail $file]
				set data [file:read $file]
				binary scan $data H* hex

				set size 250
				foreach bot $bots { putbot $bot [list botsend:quick start $tail] }
				while { [notempty hex] } {
					set line [left $hex $size]
					foreach bot $bots { putbot $bot [list botsend:quick data $tail $line] }
					set hex [right $hex -$size] 
				}
				foreach bot $bots { putbot $bot [list botsend:quick eof $tail] }
			}

			print $nick "\[BOTSEND QUICK\] Sent to [ajl $bots]: [ajl $files]"
			return
		}

		sedn - send {
			array set status [list ok "" utl "" perm "" botnet "" open ""]
			array set send [list bots "" files "" names ""]

			flags:simple $2e [list -noencryption] data flags
			if { [llength $data] == 2 } { set data [linsert $data 1 :] }
			set files [lassign [split $data :|] bots]
			set files [join $files]

			set tempbots ""
			foreach bot $bots {
				set alias [data array get BOTSEND ALIAS:$bot]
				if [isempty alias] { lappend tempbots $bot } { set tempbots [concat $tempbots $alias] }
			}
			foreach bot $tempbots { set bot [trim $bot] ; if [islinked $bot] { lappend send(bots) $bot } { lappend status(botnet) $bot } }
			foreach file $files {
				set file [sb7 component [trim $file]]
				if [file exists $file] { 
					if [is component $file] { lappend send(names) [sb7 shortname $file] } { lappend send(names) $file }
					lappend send(files) $file
				} {
					lappend status(utl) $file 
				}
			}
			if [notempty status(botnet)] { print -help $nick "\[BOTSEND\] Not part of the botnet: [ajl $status(botnet)]" }
			if [notempty status(utl)] { print -help $nick "\[BOTSEND\] Unable to locate the following files: [ajl $status(utl)]" }
			if [isempty send(bots)] return
			if [isempty send(files)] return

			# Set up send buffer (a major change from the previous SB7 method)
			@botsend:enqueue $nick $host $handle $chan $send(bots) $send(files) $flags

			if [notempty send(bots)] { print $nick "\[BOTSEND\] Sending attention signals to [ajl $send(bots)]: [ajl $send(names)]" }
			if [notempty status(open)] { print $nick "\[BOTSEND\] Failures (unable to open file): [ajl $status(open)]" }
#debug =DATA([data list @botsend:${id}*])
			sb7 killtimer -quiet @botsend:timeout
			utimer [none [data array get botsend option:timeout] 300] @botsend:timeout
			return
		}

		set {
			if ![access check 1000 $handle] { print -error -header -return $nick "You don't have access to use this option." }

			if [isempty 2] { print -error -header -return $nick "Options: help, list\; [ajl [data array get botsend options]]" }
			switch -exact -- $2l {

				help { print -error -header -return $nick "Options: help, list\; [ajl [data array get botsend options]]" }

				autoshift {
					if [isempty 3] { print -error -header -return $nick "What value am I setting to $0u ${2u}?" }
					set autoshift [boolean -falsetrue $3]
					data array set botsend option:autoshift $autoshift
					saveme data
					print -header $nick "[iff $autoshift Activating Deactivating] $0u $2u"
					return
				}

				autoload {
					if [isempty 3] { print -error -header -return $nick "What value am I setting to $0u ${2u}?" }
					set autoload [boolean -falsetrue $3]
					data array set botsend option:autoload $autoload
					saveme data
					print -header $nick "[iff $autoload Activating Deactivating] $0u $2u"
					return
				}

				dir {
					if [isempty 3] { print -error -header -return $nick "What value am I setting to $0u ${2u}?" }
					set dir [join $3e]
					data array set botsend option:dir $dir
					saveme data
					print -header $nick "New save directory: $dir"
					return
				}

				time - timeout {
					if [isempty 3] { print -error -header -return $nick "What value am I setting to $0u ${2u}?" }
					set timeout [join $3]
					data array set botsend option:timeout $timeout
					saveme data
					print -header $nick "New timeout: [plural -show -comma second $timeout][iff { $timeout > 60 } " ([urt $timeout " "])"]"
					return
				}

				list {
					print $nick "\[BOTSEND SET LIST\]"
					foreach a [data array get botsend options] { print $nick "[space 5]${a}: [data array get botsend option:$a]" }
					print $nick "End of list."
					return
				}

				default { print -error -header -return $nick "\[BOTSEND SET\] Illegal option: $2u" }

			}
		}

		get {
			if [isempty 2] { print -error -header -return $nick "Options: [ajl [data array get botsend options]]" }
			if { [lsearch -exact [data array get botsend options] $2l] == -1 } { print -error -header -return $nick "Illegal option: $2u" }
			set value [data array get botsend option:$2]
			if [isempty value] { set value <undefined> }
			print -header $nick "$0u ${2u}: $value"
			return
		}

		list {
			print -short $nick "List of $0u settings:"
			foreach a [lsort -increasing -dictionary [data array get botsend options]] {
				set value [data array get botsend option:$a]
				if [isempty value] { set value <undefined> }
				print $nick "[string totitle $a]: $value"
			}
			print $nick "Done."
			return
		}

		clear {
			if ![string eq -nocase CLEAR $2] { print -header -return $nick "Are you \002\037SURE\037\002?! Use \"$0u $1u CLEAR\" to convince me." }
			foreach a [data array get BOTSEND OPTIONS] { data array set BOTSEND OPTION:$a }
			data array set BOTSEND OPTIONS
			@botsend:bootstrap ; # Restore all default settings
			print -header $nick "Cleared all BOTSEND settings: defaults have been re-installed."
			return
		}

		default { print -help -error -header -return $nick "I have no idea what you mean by: $1u" }

	}
}

# Short syntax:
# Sending bot: send SYN code, begin burst, send EOF
# Receiving bot: verifies incoming data. If BAD, set "reject" code & ignore all until EOF. Otherwise, store it

proc @botsend:enqueue { nick host handle chan bots files { flags "" } } {
#debug *
	foreach file $files {
		foreach bot $bots {
			set file [sb7 component $file]
			sb7 log "Queueing (${::botnet-nick} --> ${bot}): $file"

			set tail [file tail $file]
			set size [file size $file]
			set r [open $file r]
			fconfigure $r -translation binary
			set data [read $r]
			close $r

			binary scan $data H* hex
			set hex [string toupper $hex]
			if ![validflag -noencryption] { set hex +[encrypt sb7:botsend:02 $hex] }
			if [isempty ::botnet-nick] { set id $::botnick } { set id ${::botnet-nick} }
			append id :[clock seconds].[implode [random -explode -all [mid [clock clicks] 2]]]
			data array set @botsend $id [list tx false $nick $host $handle $chan $bot [clock seconds] [clock clicks -milli] $file $hex $size]
			putbot $bot [list botsend:receiver header $id $nick $host $handle $chan $tail [clock seconds] [expr abs([clock clicks -milli])] $size]
		}
	}
}

proc @botsend:receiver { bot - arg } {
	lassign $arg cmd id 0 1 2 3 4 5 6 7
	# HEADER: $id $nick $host $handle $chan $tail [clock seconds] [expr abs([clock clicks -milli])]]
#debug cmd
	switch -exact -- [string tolower $cmd] {

		kill - killall {
			set message "\[BOTSEND\] Received KILLALL from: [nph $0 $1]@$bot"
			putcmdlog $message
			print -home $message
			foreach id [data array find @BOTSEND] {
				lassign [data array get @BOTSEND $id] _nick _host _handle _chan _tail _seconds _milli _bot _encryption _data
				if [string eq -nocase $bot $_bot] {
					putcmdlog "\[BOTSEND\] Killing transfer: [nph $_nick $_handle]@${_bot} --> $_tail"
					data array set @botsend $id
				}
			}
			return
		}

		header {
			# Does user have privileges to send this file here?
			set ok 1
			if ![validuser $2] { set ok 0 }
			if ![string eq -nocase $2 [handle ${0}!${1}]] { set ok 0 }
			if ![access check [sb7 command get botsend level] $2] { set ok 0 }

			if !$ok {
				set message"\[BOTSEND\] Rejecting file send: [nph $0 $2]@$bot --> ${4}: user is not authorized to send files here"
				putcmdlog $message
				print -home $message
				botsend:sender reject $id
				return
			}
			data array set @BOTSEND:RECEIVE $id [list rx $0 $1 $2 $3 $4 $5 $6 $bot "" $7]
			# direction nick host handle chan tail ts milli from data size
#debug =DATA([data array get @BOTSEND:RECEIVE $id])
			putbot $bot [list botsend:sender send $id]
			set message "\[BOTSEND\] Receiving file: [nph $0 $2]@${bot} --> $4"
			putcmdlog $message
			print -home $message
			return
		}

		data {
			# Collect into bucket only (no parsing)
			set data [data array lindex @BOTSEND:RECEIVE $id 9]
			append data $0
			data array lset @BOTSEND:RECEIVE $id 9 $data
			return
		}

		eof {
#debug arg
#debug =BOTSEND =EOF =0 arg cmd id =DATA([data get @BOTSEND:$id])
			pingpong

			# write file; report errors to $HOME
#debug =BOTSEND =EOF =0.25 =[data array get @BOTSEND $id]
			lassign [data array get @BOTSEND:RECEIVE $id] direction nick host handle chan filename time milli from data size
			# direction nick host handle chan tail ts milli from data size
#debug =BOTSEND =EOF =0.5 direction nick host handle chan filename time milli from =LEN:DATA([len $data]:[left $data 100]) size; # data
			data array set @BOTSEND:RECEIVE $id
#debug =BOTSEND =EOF =1
			#set path [sb7 target dir $filename]
			set path [none [data array get botsend option:dir] [sb7 target dir ""]/botsend]
#debug =BOTSEND =EOF =2 path

			# Auto-shift?
			set text_autoshift ""
			if [data array get -boolean botsend option:autoshift] {
				set text_autoshift " (auto-shifted)" ; # Space!
				set path [sb7 target dir $filename]
			}
#debug =BOTSEND =EOF =3
#debug =[data array get -boolean BOTSEND option:AUTOSHIFT]
#debug =1 path text_autoshift

			if ![file isdirectory $path] { file mkdir $path }

#debug =BOTSEND =EOF =4 =LEFT/1([left $data 1])
			switch -exact -- [left $data 1] {
				- { set data [decrypt sb7:botsend:01 [mid $data 2]] }
				+ { set data [decrypt sb7:botsend:02 [mid $data 2]] }
				= { set data [decrypt sb7:botsend:03 [mid $data 2]] }
			}

#debug =BOTSEND =EOF =5 =${path}/${filename}
			set error [ catch {
				set w [open ${path}/$filename w]
				fconfigure $w -translation binary
				puts $w [binary format H* $data]
				flush $w
				close $w
				set size [file size ${path}/$filename]
			} crap]
#sb7 log =BOTSEND =EOF =5.5 =([data get @BOTSEND:$id]) $arg $0 $1 $milli
#sb7 log =BOTSEND =EOF =6
			if $error { set m "\[BOTSEND\] Unable to write ${path}/${filename}: $crap" ; putcmdlog $m ; print -home $m ; error $m }
			set elapsed [expr abs( abs( $milli ) - abs( $1 ) )]
			if { $elapsed > 1000 } { set time [expr $elapsed / 1000.0] ; set timeword s } { set time $elapsed ; set timeword ms }
			set speed [expr ( $size / ( $elapsed / 1000.0 ) ) / 1024 ]

#sb7 log =BOTSEND =EOF =7
			set text_autoload ""
			if [data array get -boolean botsend option:autoload] {
				if [is component $filename] {
					if [regexp -nocase -- {^(sb7([_\-][^\.]+)?\.tcl|[^\.]+\.sb7)$} [file tail $filename]] {
						set text_autoload " (auto-loaded)" ; # Space!
						[sb7 command get maintenance proc] $nick $host $handle $chan "maintenance load [file tail $filename]"
					} {
						set text_autoload " (auto-load: N/A)" ; # Space!
					}
				}
			}
			putbot $bot [list botsend:complete $id]
#sb7 log =BOTSEND =EOF =8
			print -home "\[BOTSEND\] Successfully saved${text_autoshift}${text_autoload}: [file tail ${path}/$filename] ([comma $size] bytes / [format %.3f $time] $timeword / [format %.3f $speed] KiB/s)"
#sb7 log =BOTSEND =EOF =9
			return
		}

		default { set m "\[BOTSEND\] Unknown data type received from ${bot}: $cmd" ; putcmdlog $m ; print -home $m ; error $m }

	}
	return
}

proc @botsend:sender { bot - arg } {
	lassign $arg cmd id 0 1 2 3 4 5 6 7 8 9
#debug cmd id 0 1 2 3 4 5 6 7 8 9 arg
	switch -exact -- [string tolower $cmd] {

		send {
			data array lset @botsend $id 1 true
#debug =SEND [data array lrange @botsend $id 0 8]
			lassign [data array get @botsend $id] - - nick - handle - - - - file
			set tail [file tail $file]
			putcmdlog "\[BOTSEND\] Sending [nph $nick $handle]@[file tail $file] --> $bot ...."
			return
		}

		reject {
			lassign [data array get @botsend $id] nick - - - - file
			data array set @botsend $id ""
			set message "\[BOTSEND\] $bot rejected send of: $file"
			putcmdlog $message
			print -home $message
			@botsend:check_empty
			return
		}

		kill - killall {
			foreach a [data array names @botsend] { data array set @botsend $a "" }
			set message "\[BOTSEND\] Received KILLALL from [nph $0 $1]@$bot"
			putcmdlog $message
			print -home $message
			return
		}

		default { print -home -return "\[BOTSEND\] Unknown command received from ${bot}: $cmd" }

	}
}

proc @botsend:complete { bot - id } {
	data array set @botsend $id ""
	if [string eq "" [data array names @botsend]] { print -home "[effects "\[BOTSEND\] All files successfully transferred." 6 b u]" }
	sb7 killtimer -quiet @botsend:timeout
	return

#putlog "\[@BOTSEND:COMPLETE\] BOT($bot):ID($id)"
	set size [data get @BOTSEND:${id}:SIZE]
#putlog "\[@BOTSEND:COMPLETE\] SIZE($size)"
	data set @BOTSEND:${id}:SIZE ""
	lassign [split $id :] nick time milli random
#putlog "\[@BOTSEND:COMPLETE\] NICK($nick):TIME($time):MILLI($milli):RANDOM($random)"
	set now [clock seconds]
	set now_milli [expr abs([clock clicks -milli])]
	set elapsed [expr $now - $time]
	set elapsed_milli [expr abs( $now_milli - $milli )]
#putlog "\[@BOTSEND:COMPLETE\] SIZE($size):NOW($now):NOW_MILLI($now_milli):ELAPSED($elapsed):ELAPSED_MILLI($elapsed_milli)"
	if { $elapsed_milli > 1000 } { 
		set elapsed_milli [expr $elapsed_milli / 1000.0]
		set word seconds
		set abbr s
		set factor .001 ; # Tested OK
	} { 
		set word milliseconds
		set abbr ms
		set factor 1 ; # Tested OK
	}
#putlog "\[@BOTSEND:COMPLETE\] ELAPSED_MILLI($elapsed_milli):WORD($word)"
	print -home "\[BOTSEND\] Transfers complete ([effects [ajl $files] b]): \002\037[comma $size] bytes\037\002 ([bytes $size 1]) in \002\037[comma [format %.1f $elapsed_milli]] $word\037\002 ([format %.1f [expr (${size}.0 / $elapsed_milli ) * $factor ]] kib/s)"
	return
}

proc @botsend:queue args {
#sb7 log @BOTSEND:QUEUE=1
	sb7 killtimer -quiet @botsend:queue
#sb7 log @BOTSEND:QUEUE=2
	utimer 0 @botsend:queue
#sb7 log @BOTSEND:QUEUE=3

	set option_buffer 25000 ; # How many characters to stuff into the buffer
	if [data array get -notempty botsend option:buffer] { set option_buffer [data array get botsend option:buffer] }
	if [data array get -notempty botsend option:chars] { set option_chars [data array get botsend option:chars] } { set option_chars 0 }

#sb7 log @BOTSEND:QUEUE=5:NAMES([data array names @botsend])

	set found 0
	foreach id [data array find @botsend] {
		set active [none [data array lindex @botsend $id 1] false]
#putlog ACTIVE($active):ID($id):DATA([data array get @botsend $id])
		if $active { set found 1 ; break }
	}
	if !$found return

# Damn thing prints every time this is called (multiple times for larger files)
#sb7 log "[nph [data array lindex @botsend $id 2] [data array lindex @botsend $id 4]] is sending \"[file tail [data array lindex @botsend $id 9]]\" to: [effects [casebot [data array lindex @botsend $id 6]] b] (ID: #$id)"
	set header [list botsend:receiver data $id]
	lassign [data array get @botsend $id] direction active nick host handle chan bot seconds milli file data size
	if $option_chars {
		set chars $option_chars
	} {
		set chars [expr 390 - ( [len "z ${::botnet-nick} $bot $header "] ) ] ; # Botnet only allows 400 chars-per-line: "z <from> <to> $header "
	}
#sb7 log ID($id):CHARS($chars):DATA([data array get @botsend $id])

	set buffer [left $data $option_buffer]
	set remainder [right $data -$option_buffer]
	data array lset @botsend $id 10 $remainder

	sb7 killtimer -quiet @botsend:timeout
	utimer [none [data array get botsend option:timeout] 300] @botsend:timeout
	set count 0
	while { [notempty buffer] } {
		incr count
		set line [concat $header [left $buffer $chars]]
		set buffer [right $buffer -$chars]
		putbot $bot $line
		if [isempty buffer] {
			if [isempty remainder] {
				sb7 log "File send complete: [nph $nick $handle]@${::botnet-nick} --> $file ([comma $size] bytes / [bytes $size 1])"
				data array lset @botsend $id 1 false
				putbot $bot [list botsend:receiver eof $id [clock seconds] [clock clicks -milli]]
				break
			}
		}
	}
	return
}

proc putfile { file mode text } {
	if [isempty mode] { set mode w }
	if [string eq * $mode] { set mode a+ }
	set w [open $file $mode]
	puts $w $text
	flush $w
	close $w
	return
}

proc @botsend:quick { bot cmd arg } {
	set data [lassign $arg cmd tail]
	switch -exact -- [string tolower $cmd] {

		start {
			data array set @botsend:quick $tail ""
			return
		}

		data {
			data array append @botsend:quick $tail $data
			return
		}

		eof {
			set dir [none [data array get botsend option:dir] ./botsend]
			if ![file isdirectory $dir] { file mkdir $dir }
			set target ${dir}/$tail
			
			file:write $target [binary format H* [data array get @botsend:quick $tail]]
			data array set @botsend:quick $tail ""
			empty tag
			if [data array get -boolean botsend option:autoshift] {
				set target_new [sb7 component $tail]
				set error [ catch { file rename -force $target $target_new } crap ]
				if $error {
					append tag " (error while auto-shifting: $crap)"
				} {
					append tag " (auto-shifted)"
					set target $target_new
					if [data array get -boolean botsend option:autoload] {
						if [regexp -nocase -- {^(sb7([_\-][^\.]+)?\.tcl|[^\.]+\.sb7)$} $tail] {
							data set @botsend:quick:file $target
							set error [ catch { uplevel #0 { source [data get @botsend:quick:file] } } crap ]
							if $error { append tag " (error while auto-loading: $crap)" } { append tag " (auto-loaded)" }
							data set @botsend:quick:file
						} {
							append tag " (auto-load: N/A)"
						}
					}
				}
			}
			print -home "\[BOTSEND QUICK\] File transfer complete: ${tail}$tag"
			return
		}

		default { error "\[@BOTSEND:QUICK\] Unknown data command: $cmd" }

	}
	?
}

proc @botsend:timeout args {
	sb7 killtimer @botsend:timeout
	data set @botsend
	print -home "\[BOTSEND\] Timeout: all active transfers cancelled."
	return
}

proc @botsend:bootstrap args {
	set options [list autoshift:false autoload:false dir:[sb7 target dir ""]/botsend timeout:300]
	empty defaults
	foreach option $options {
		lassign [split $option :] a b
		if [data array isempty botsend option:$a] { data array set botsend option:$a $b }
		lappend defaults $a
	}
	data array clear @botsend *
	data array set botsend options $defaults
	sb7 killtimer -quiet @botsend:queue
	utimer 0 @botsend:queue
}

#####
# BootStrap

bind bot - botsend:gimme @botsend:gimme
bind bot - botsend:receiver @botsend:receiver
bind bot - botsend:complete @botsend:complete
bind bot - botsend:sender @botsend:sender
bind bot - botsend:quick @botsend:quick

@botsend:bootstrap

