sb7 command add voice     50 -chanspec 
sb7 command add halfop    75 -chanspec halfop hop
sb7 command add op       100 -chanspec 
sb7 command add prot     400 -chanspec 
sb7 command add own      500 -chanspec 
sb7 command add devoice   50 -chanspec 
sb7 command add dehalfop  75 -chanspec dehop
sb7 command add deop     100 -chanspec 
sb7 command add deprot   400 -chanspec 
sb7 command add deown    500 -chanspec 
sb7 command add modekill  50 -chanspec mk

# Next: auto voice/halfop/op/prot/own

proc @voice    { nick host handle chan arg } { @op:mode $nick $host $handle $chan + v $arg }
proc @halfop   { nick host handle chan arg } { @op:mode $nick $host $handle $chan + h $arg }
proc @op       { nick host handle chan arg } { @op:mode $nick $host $handle $chan + o $arg }
proc @prot     { nick host handle chan arg } { @op:mode $nick $host $handle $chan + a $arg }
proc @own      { nick host handle chan arg } { @op:mode $nick $host $handle $chan + q $arg }
proc @devoice  { nick host handle chan arg } { @op:mode $nick $host $handle $chan - v $arg }
proc @dehalfop { nick host handle chan arg } { @op:mode $nick $host $handle $chan - h $arg }
proc @deop     { nick host handle chan arg } { @op:mode $nick $host $handle $chan - o $arg }
proc @deprot   { nick host handle chan arg } { @op:mode $nick $host $handle $chan - a $arg }
proc @deown    { nick host handle chan arg } { @op:mode $nick $host $handle $chan - q $arg }

proc @op:mode { nick host handle chan polarity mode arg } {
	# All OP commands (voice, halfop, op, prot, & own) come through here
	FLAGS

	if [string eq -nocase HELP $1] {
		print -help $nick "\[$0u\]"
		print -help $nick "Syntax: $::botnick $0u HELP"
		print -help $nick "Syntax: $::botnick $0u <list of nicks>"
		print -help $nick "Makes $::botnick $0u (${polarity}${mode}) you or a list of users"
		return
	}

	empty ok bad
	foreach user [none $1e $nick] {
		lassign:array target [whois $user $handle] - nick - handle
		if [access compare -self:ok $handle $target(handle) $chan] { 
			lappend ok $user
			raw "MODE $chan ${polarity}${mode} $target(nick)"
		} {
			lappend bad $user
		}
	}
	if [notempty ok] { print -short $nick "Successful ${0u}s: [ajl -unique $ok]" }
	if [notempty bad] { print -short $nick "Failed ${0u}s (insufficient access): [ajl -unique $bad]" }
	return
}

proc @modekill {nick host handle chan arg} {
	FLAGS
	if [string eq -nocase HELP $1] {
		printh $nick "\[MODEKILL\]"
		printh $nick "Syntax: $::botnick MODEKILL HELP"
		printh $nick "Syntax: $::botnick MODEKILL \[list of nicks\]"
		printh $nick "MODEKILL will remove all chanop flags from you (-qaohv, which ever are permitted by the server)."
		return 0
	}

	empty ok bad
	foreach user [none $1e me] {
		lassign:array modekill [whois $user $handle] - nick - handle
		if [access compare -self:ok $handle $modekill(handle) $chan] { 
			lappend ok $user
			raw "MODE $chan -vhoaq $modekill(nick) $modekill(nick) $modekill(nick) $modekill(nick) $modekill(nick)" 
		} {
			lappend bad $user
		}
	}
	if [notempty ok] { print -short $nick "Successful: [ajl -unique $ok]" }
	if [notempty bad] { print -short $nick "Failed (insufficient access): [ajl -unique $bad]" }
	return
}
