sb7 command add CHANSET  400 -chanspec CS

data set @chanset:valid [list:tolower [list aop-delay autohalfop autoop autovoice ban-time bitch chanmode cycle dontkickops dynamicbans dynamicexempts dynamicinvites enforcebans exempt-time flood-chan flood-ctcp flood-deop flood-join flood-kick flood-nick greet idle-kick inactive invite-time need-invite need-key need-limit need-op need-unban nodesynch protectfriends protecthalfops protectops revenge revenge-mode revengebot secret seen shared statuslog stopnethack-mode userbans userexempts userinvites]]

proc @chanset { nick host handle chan arg } {
	FLAGS
	if [string eq -nocase HELP $1] {
		print -help $nick "\[CHANSET\]:"
		print -help $nick "Syntax: $::botnick CHANSET HELP"
		print -help $nick "Syntax: $::botnick CHANSET <setting> <new value>"
		print -help $nick ""
		print -help $nick "The CHANSET command sets new information into the channel's control settings."
		print -help $nick "To remove a value, enter: none"
		print -help $nick "To see the current settings, use the CHANINFO command."
		return
	}

	set word [lassign $1e setting]
	if [string match -nocase NEED-* $setting] { if ![access check 501 $handle] { print -help -short -return $nick "You don't have access to set $1 (admins only)" } }
	if [regexp -- {^[\+\-][^\+\-]} $setting] {
		empty ok bad
		foreach entry [concat $setting $word] {
			if { [lsearch -exact [data get @chanset:valid] [mid $setting 2]] == -1 } { lappend bad $entry ; continue }
			lappend ok $entry
			channel set $chan $entry
		}
		if [notempty ok] { save ; print -short $nick "New values set: $ok" }
		if [notempty bad] { print -short $nick "Invalid settings: $bad" }
		return
	} {
		if { [lsearch -exact [data get @chanset:valid] $setting] == -1 } { print -help -short -return $nick "No such option: $1u (valid options: [ajl [data get @chanset:valid]])" } 
		if [string eq -nocase NONE $word] { empty value } { set value $word }
		channel set $chan $setting $value
		print -short $nick "Value now set: $setting ($word)"
	}
	saveme chan
	return
}

