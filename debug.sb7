sb7 command add DEBUG 900 -core
# At 900 because sometimes, on first use, $OWNER -> 900 not (botowner).
# [The owner hasn't bothered to set $OWNER !!]

proc @debug { nick host handle chan arg } {

# "> DEBUG: \$ARG ($arg)"

	sb7 parseflags

	switch -exact -- [string tolower $1] {

		"" - help {
			print -help $nick "\[DEBUG\]:"
			print -help $nick "Syntax: $::botnick DEBUG HELP"
			print -help $nick "Syntax: $::botnick DEBUG INFO"
			print -help $nick "Syntax: $::botnick DEBUG TRIGGERS"
			print -help $nick "Syntax: $::botnick DEBUG COMMAND <command> (shows you stats on all commands within the given bead)"
			print -help $nick "Kicks-up information to report to the coder, in case you are having problems and can't find the issue(s) on your own."
			print -help $nick "Report issues to: chat.bothouse.net - #BotHouse :: If no one is there, paste your DEBUG info to the channel. The channel is ALWAYS logged\; someone will forward the information to a coder. Be sure to include an email address for a reply!"
			return 0
		}
	
		info {
			set home [home]
			if [string eq "" $home] { print -help $nick "Some of my tests will fail because they require that I am on, at least, one channel." }
			set nw "\$NETWORK unset"
			if [info exists ::network] { set nw $::network }
			set network " ($nw network)"

			# ----------------------------------------------------------------------

			print $nick "\[DEBUG\]"
			print $nick "EGGDROP version: [lindex $::version 0], running $::tcl_platform(machine) with $::tcl_platform(os) $::tcl_platform(osVersion) ($::tcl_platform(platform)) \[[info hostname]\] system. I'm currently running from: [pwd], using TCL: $::tcl_patchLevel ( $::tcl_library ). My TCL package library directory is: [info library]"
			print $nick "EGGDROP source modules loaded: [ajl [stl [get first [get first [modules]]]]]"
			empty nl1 nl2
			if [info exist ::nicklen] { set nl1 $::nicklen } 
			if [info exist ::nick-len] { set nl2 ${::nick-len} } 
			print $nick "EGGDROP user information length variables: \$NICKLEN ([none $nl1 <undefined>]), \$NICK-LEN ([none $nl2 <undefined>]), \$HANDLEN ($::handlen)"
			print $nick "StormBot.TCL version [data array get @version stormbot] ([format:date [data array get @version timestamp]]) from: [data array get @version distro]"
			set server ""
			set servers ""
			if [info exists ::server] { set server [split $::server :] }
			if [info exists ::servers] { 
				foreach a $::servers {
					set s [trim [split $a :]]
					lappend servers "[trim [lindex $s 0]] ([trim [lindex $s 1]])"
				}
			}
			
			print $nick "Online at [none $server <none> "[lindex $server 0] ([lindex $server 1])"][iff ![string eq "" [lindex $server 2]] " (passworded)"] as \"${::botnick}\" ([lindex [split $::botname !] 1]), \$ALTNICK(${::altnick}), \$BOTNET-NICK(${::botnet-nick}), since [format:date ${::server-online} $handle] ([datediff [clock seconds] ${::server-online}] ago)"
			print $nick "Server list: [none [join $servers ", "] <none>]"
			print $nick "Reporing events to: [none $home <nowhere>][iff [data get -boolean config mute] " (currented muted by: CONFIG -GLOBAL MUTE)"]"
			print $nick "My permanent owners: [get owners]"
			print $nick "My current binds:"
			array set binds [list]
			foreach bind [binds sb7:dispatch] { lappend binds([lindex $bind 1]) [lindex $bind 2] }
			foreach a [lsort -increasing -dictionary [array name binds]] { print $nick "[space 5]BIND([effects $a b]): [ajl $binds($a)]" }

			# Error checks / command version checks:
			set error [ catch { lsearch -cow 1 2 } error_lsearch ]
			print $nick "LSEARCH options: [lrange [regexp -inline -all -nocase -- {\-[A-Za-z0-9]+} $error_lsearch ] 1 end]"

			set tests {
				{{LSEARCH multiflags} {set mode [lindex [lsearch -inline -glob "{ban b} {exempt e} {invite I}" "ban *"] 1]}}
				{{LSET} {set check [list 0 1 2 3]; lset check 0 *}}
				{{BIND EVNT CONNECT-SERVER} {bind EVNT - connect-server SB:CRAP} {killbind EVNT - connect-server SB:CRAP}}
				{{BIND EVNT SIGILL} {bind EVNT - sigill sb7:debugtest:deleteme} {killbind EVNT - sigill sb7:debugtest:deleteme}}
				{{BIND EVNT SIGTERM} {bind EVNT - sigterm sb7:debugtest:deleteme} {killbind EVNT - sigterm sb7:debugtest:deleteme}}
				{{FILE NORMALIZE} {set check [file normalize .]}}
				{{LRANGE END-1} {set check [lrange "1 2 3 4" 0 end-1]}}
				{{CHANNEL GET INFO FLOOD-CHAN} {set check [channel get [home] flood-chan]}}
				{{CHANNEL GET INFO FLOOD-PUB (this is a normal failure)} {set check [channel get [home] flood-pub]}}
				{{SETUDEF} {setudef flag errortest} {deludef flag errortest}}
				{{DCCSEND (only available from TRANSFER module)} {dccsend \000 \000#IllegalNick#\000}}
				{{UNSET -NOCOMPLAIN} {set NOCOMPLAIN 0; unset -nocomplain NOCOMPLAIN} {unset NOCOMPLAIN}}
				{{INACTIVE (needed for CHANSUSP / CHANUNSUSP)} {channel get [home] inactive}}
			}

			array set debugcheck [list 0 "" 1 ""]
			foreach test $tests {
				set text [lindex $test 0]
				set error [ catch { eval [lindex $test 1] } ohcrap ]
				if $error  { lappend debugcheck(0) "${text}: $ohcrap" } { lappend debugcheck(1) $text }
				if ![string eq "" [lindex $test 2]] { catch { eval [lindex $test 2] } } ; # Ignore errors!
			}

			print $nick "Passed tests: [ajl $debugcheck(1)]"
			print $nick "Failed tests: [ajl $debugcheck(0)]"

			print -help $nick "Critical variable dump:"
			set variables "dccsupport default-port use-exempts use-invites ban-time ignore-time exempt-time strict-host [uplevel #0 { concat [info vars tcl_*] } ]"
			set tempscalar ""
			set temparray ""
			foreach a $variables {
				if [info exists ::$a] {
					if [array exists ::$a] {
						set temp "\[\]"
						lappend temparray "\$${a}\[\]([array get ::$a])"

					} {
						lappend tempscalar "\$${a} ([set ::$a])"
					}
				} {
					lappend tempscalar "\$$a <undefined>"
				}
			}
			print -help $nick "Scalar: [ajl $tempscalar]"
			print -help $nick "Array: [ajl $temparray]"

			# GREET check
			set temp ""
			foreach a [channels] { if ![channel get $a greet] { lappend temp $a } }
			set output "All channels have +GREET"
			if {$temp == ""} { append output " :)" } { append output " except: [join $temp " - "]" }
			print $nick "GREET check: \$use-info(${::use-info}), \$wait-info(${::wait-info}) -- $output"
			print $nick ""
			set traffic [traffic]
			set gl_types [get longest [get first $traffic]]
			print $nick "Traffic stats (in bytes):"
			print $nick "[format %${gl_types}s Type] | [format %11s in:today] - [format %11s in:total] - [format %11s out:today] - [format %11s out:total]"
			print $nick [string repeat - $gl_types]-+-[string repeat - 53]
			foreach a [traffic] { print $nick "[format %${gl_types}s [lindex $a 0]] | [format %11s [comma [lindex $a 1]]] - [format %11s [comma [lindex $a 2]]] - [format %11s [comma [lindex $a 3]]] - [format %11s [comma [lindex $a 4]]]" }
			print $nick ""

		##### Valid mode checks (can't be written until core is updated with mode scanner (raw mode 005)) #####
		#Available channel modes: b, c, e, f, i, j, k, l, m, n, p, r, s, t, u, z; A, C, G, I, K, L, M, N, O, Q, R, S, T, V, Z

			print $nick "Debug complete."
			return
		}

		bind - binds - trigger - triggers {
			print $nick "My current binds:"
			array set binds [list]
			foreach bind [binds sb7:dispatch] { lappend binds([lindex $bind 1]) [lindex $bind 2] }
			foreach a [lsort -increasing -dictionary [array name binds]] { print $nick "[space 5]BIND([effects $a b]): [ajl $binds($a)]" }
			print $nick "Debug complete."
			return
		}

		cmd - cmds - command - commands {
			set commandlist [string tolower [sb7 command list]]
			set cmds [lremove -not -all -glob -multiple $commandlist [string tolower $2e]]
			if [isempty cmds] { print -help -return -short $nick "About what command(s) are you asking?" }
			foreach cmd [lsort -increasing -unique -dictionary $cmds] {
				print $nick "\[[effects $cmd b u]\] abbr([none [sb7 command get $cmd abbr] <none>]), level([sb7 command get $cmd level]), default([sb7 command get $cmd original]), proc([sb7 command get $cmd proc]), flags([none [sb7 command get $cmd flags] -none]), extra([none [sb7 command get $cmd extra] <none>])"
			}
			print $nick "Debug complete."
			return
		}

		default ?
	}
}

